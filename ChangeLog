2012-06-20 Omar A. Herrera Reyna <omar.herrera@kinakuta.com.mx>

	* strhandling.c (cmeHexstrToBytes): Replaced isalnum() with isxdigit
	to ensure that only valid hexadecimal string representations are
	processed.

	* crypto.c (cmePBKDF): Replaced hardcoded buffer length in PBKDF2
	with dynamic allocation, using the corresponding key length.

	* crypto.c (cmePBKDF): Added fast PBKDF2 routine (one iteration) to
	be used only if password is an hexadecimal representation of a byte
	string of length >= cipher's keyspace.

	* engine_admin.c (cmeSetupEngineAdminDBs): Modified function to use
	the default cipher's key length as the length of the random key for
	engineAdmin.

	* webservice_interface.c (cmeWebServicePOSTIteration): Fixed
	argument handling with multipart POST

2012-06-18 Omar A. Herrera Reyna <omar.herrera@kinakuta.com.mx>

	* common.h (cmeWSMsgContenColumnsOptions) Added contentColumn
	resource options.

	* webservice_interface.c, webservice_interface.h
	(cmeWebServiceProcessContentColumnResource): Added web service to
	process contentColumn resource requests.

	* webservice_interface.c (cmeWebServiceProcessContentClass): Fixed
	error response when document is not found.  Fixed handling of emty
	tables (i.e.  those with just column names but no rows).

	* filehandling.c (cmeMemTableToSecureDB): Modified function to
	handle new tables with just 1 column and 0 rows, so that POST
	requests of contentColumn when the documentId is new are handled
	correctly.

	* db.c,db.h (cmeMemTableWithTableColumnNames): Added function to get
	(in cmeResultMemTable) a string array of column names for table
	tableName.  This function uses SQLite's PRAGMA table_info().  It is
	needed for tables with 0 rows since in that case SQLite returns also
	0 columns.

	* db.c,db.h (cmeSanitizeStrForSQL): Added function to sanitize input
	that will be used in sql queries directly, to avoid sql injection
	attacks.  It does this by doubling any single quote found within the
	input string.

	* db.c,filehandling.c,engine_interface.c (cmeMemSecureDBUnprotect,
	cmeMemSecureDBProtect, cmeDeleteSecureDB, cmePostProtectDBRegister,
	cmePutProtectDBRegister, cmeCVSFileToSecureSQL, cmeMemTableToMemDB,
	cmeMemTableToSecureDB): Modified functions to include sql injection
	protection using cmeSanitizeStrForSQL, for sql query parameters
	coming from protected data tables (e.g.  table column names).

	* db.c (cmeMemTableToMemDB, cmeMemTableShuffle): Added standard
	cleanup macro and adjusted function flow accordingly.

	* db.c (cmeSQLRows): replaced free cmeResultMemTable routine with a
	call to cmeResultMemTableClean() (which does exactly the same).

	* engine_interface.c (cmeSecureDBToMemDB): Fixed Memory leak
	(queryResult was not freed after call).

	* engine_interface.c (cmeDeleteUnprotectDBRegister): Fixed memory
	segfault error and orphan file parts.	
	
	* engine_interface.c,engine_interface.h (cmeExistsDocumentId): Added
	function to identify if a protected document (with corresponding
	orgKey, orgId) exists in ResourcesDB (table documents) without
	having to unprotect and load the whole document in memory (with
	cmeSecureDBToMemDB.  This should improve performance considerably;
	closed corresponding TODO.

	* engine_interface.c,filehandling.c (cmeDeleteSecureDB,
	cmeCSVFileToSecureDB, cmeMemTableToSecureDB): Modified functions so
	that they now use cmeExistsDocumentId instead of cmeSecureDBToMemDB
	to check if a document exists (much faster).

	* webservice_interface.c (SELECT * FROM data;): eliminated BEGIN
	TRANSACTION; and COMMIT; from several select statements since they
	were single statements and therefore it is not necessary to group
	them.

2012-05-22 Omar A. Herrera Reyna <omar.herrera@kinakuta.com.mx>

	* common.h (cmeMaxRAWDataInPart): Closed pending FIXME,
	cmeMaxRAWDataInPart > evpBufferSize works fine.

	* common.h (cmeWSMsgContenRowOptions): Added contentRow resource
	options.

	* common.h (cmeWSURIMaxArguments): Increased Max. number of URI
	arguments from 32 to 512, so that contentRow parameters may fit in
	a single call within a POST or PUT request).

	* webservice_interface.c,webservice_interface.h
	(cmeWebServiceProcessContentRowResource): Added web service to
	process contentRow resource requests.

	* engine_interface.c,engine_interface.h (cmeConstructContentRow):
	Added function to construct new content rows based on row index
	parameters (i.e.  [<column_0_based_idx_gt_0>] or [<column_name>]).

	* filehandling.c,filehandling.h (cmeMemTableToSecureDB): Added
	function to convert a memory table into a secure DB (analogous to
	cmeCSVFileToSecureDB).

	* filehandling.c (cmeCSVFileToSecureDB): Fixed some comments;
	eliminated value from local free() macro.  Added a column name check
	for 'id', to ensure that this name is reserved for internal
	databases.

	* function_tests.c (testCSV): Added test for cmeMemTableToSecureDB.

	* *.c (local free() macro): Corrected sintaxis; added semicolon
	after while (0).

	* README (resource hierarchy): Updated status of {contentRow} and
	fixed index level.

	* README (): Added specifications and examples for {contentRow}
	resource requests.


2012-05-08 Omar A. Herrera Reyna <omar.herrera@kinakuta.com.mx>

	* crypto.c,crypto.h (cmeHMACInit,cmeHMACUpdate,cmeHMACFinal): Added
	MAC wrapper functions.

	* crypto.c,crypto.h (cmeHMACByteString): Added integrated function
	to create HMAC MACs out of byte strings.

	* crypto.c (cmeDigestByteString): Modified digestBytes to be
	assigned dynamically EVP_MAX_MD_SIZE bytes and wiped after use,
	instead of using a static buffer.

	* crypto.c (cmeDigestLen): Added function to return the size of the
	digest produced by the specified digest algorithm.

	* main.c,function_tests.c,function_tests.h (testCryptoHMAC): Added
	tests for HMAC functions.
	
	* function_tests.c (testCryptoDigest_Str): Modified printed
	messages, also changed fixed digest buffer length to use
	EVP_MAX_MD_SIZE.

	* common.h (cmeDefaultMACAlg): Added define for default id of digest
	algorithm to be used by HMAC functions.

	* common.h (cmeIDDResourcesDBDocuments_partMAC): Updated internal
	database definitions to reflect the use of MAC instead of Hashes in
	field names.

	* common.h (cmeDefaultPBKDFCount): Incremented default value from
	1,000 to 2,000 (RFC 2898 recommends at least 1000).  Higher values
	are safer but they have a huge impact on performance, since each
	encrypted element has a different salt.  Therefore, we need to
	derive a key for encryptiting or decrypting each element with PBKDF.

	* common.h (cmeInternalDBDefinitionsVersion): Updated internal
	database definitions versions; included DB column names as defines. 
	This should ease future modifications and allows us to keep IDD
	definitions in a single place.

	* filehandling.c (cmeCSVFileToSecureDB,cmeRAWFileToSecureFile):
	Replaced hashing functions with HMAC MAC functions; MACs of each
	encrypted file part are stored where hashes were stored before.

	* filehandling.c (cmeSecureFileToTmpRAWFile,cmeSecureDBToMemDB):
	Added MAC verification of encrypted parts before decryption.  Also
	added some debug and error output.

	* filehandling.c (cmeSecureDBToMemDB): Cleaned code and fixed sqlite
	file closing at exit points, as well as memory allocation and
	handling.

	* webservice_interface.c,engine_admin.c (partMAC): Replaced
	references to partHash in Internal Database Definitions with
	partMAC.  We will be using a MAC (after encryption) instead of just
	plain hashes.

	* db.c,filehandling.c: replaced references to hash db ids with
	references to MAC db ids.

	* engine_interface.c (cmePostProtectDBRegister,
	cmeGetUnprotectDBRegisters,cmePutProtectDBRegisters,
	cmeDeleteSecureDB,cmeDeleteUnprotectDBRegisters): Modified functions
	so that protected value now consists of the concatenation of the MAC
	of the encrypted value and the encrypted value (instead of just the
	encrypted value).  Also optimized result gathering by eliminating
	double decryption while matching search patterns.

	* engine_admin.c (cmeRegisterSecureDBorFile): Added MAC support and
	fixed table shuffling and copying that takes place on insertion of
	new registers

	* INSTALL, README (orgKEy): changed the default key for TEST
	database.

	* configure.ac (AC_INIT): Updated version to 0.90.alpha

2012-05-01 Omar A. Herrera Reyna <omar.herrera@kinakuta.com.mx>

	* filehandling.c (cmeFileOverwriteAndDelete): Changed error into
	warning (debug) when the filepointer is null.

	* filehandling.c (cmeFileOverwriteAndDelete): fixed error outputs. 
	Error logging should be done to stderr, not to stdout as debug
	output.	
	
	* engine_interface.c (cmeGetUnprotectDBRegister): replaced
	cmeUnprotectDBValue + manual salt skipping with
	cmeUnprotectDBSaltedValue function, which skips the salt already in a
	standardized way.

	* engine_interface.c (cmeGetUnprotectDBRegister,
	cmePutProtectDBRegister): Changed error output into warning (debug)
	when cmeUnprotectDBSaltedValue fails.

	* filehandling.c (cmeSecureFileToTmpRAWFile): fixed compiler warning
	when calling fwrite without storing result.

	* filehandling.c (cmeCSVFileToSecureDB): fixed compiler warning
	"'totalParts' may be used uninitialized in this function".

	* db.c (cmeMemSecureDBProtect): fixed warning "'cont2' may be used
	uninitialized in this function".

	* function_tests.c (testCryptoSymmetric): fixed compiler warning
	when calling fwrite without storing result.

	* webservice_interface.c (cmeWebServiceProcessEngineResource): fixed
	compiler warning "'tmpPowerStatus' may be used uninitialized in this
	function". This one might have actually caused some problems.

2012-04-23 Omar A. Herrera Reyna <omar.herrera@kinakuta.com.mx>

	* common.h (prngSeedBytes,evpSaltBufferSize,cmeDefaultValueSaltLen):
	Changed default settings to 16 bytes.

	* common.h (cmeDefaultHshAlg): Changed default hash algorithm to
	sha-512.

	* common.h (cmeCopyright,cmeWSHTMLPageStart): Created Copyright
	define and modified cmeWSHTMLPageStart notice to use it.

	* common.h (cmeDefaultPBKDFCount): Created default count for the key
	derivation function cmePBKDF.

	* common.h (cmeDefaultPBKDFVersion): Added default PBKDF version.

	* function_tests.c (testCSV): Changed attributesData to use
	cmeDefaultEncAlg instead of the fixed algortihm string
	"aes-128-cbc".

	* function_tests.c (testCryptoSymmetric): Changed fixed tests with
	"aes-256-cbc" to test the algorithm specified by cmeDefaultEncAlg.

	* webservice_interface.c (cmeWebServiceProcessDocumentResource):
	Changed attributesData to use cmeDefaultEncAlg instead of the fixed
	algortihm string "aes-128-cbc".

	* configure.ac (AC_INIT): Updated version to 0.89.alpha

	* configure.ac (OLDPBKDF1): Added --enable parameter to use old
	PBKDF v1 (PKCS5v.1.5) instead of PBKDF2 (PKCS5v2.0).  PBKDF2 is now
	the default.

	* main.c: changed Copyright notice to use cmeCopyright define.
 
	* main.c: Cleaned up some comments and added function to check that
	cmeDefaultEncAlg is a supported algorithm.

	* main.c: Added standard free macro.

	* db.c (cmeMemSecureDBReintegrate): fixed pointer to unallocated
	region in pointer packing loop.

	* db.c (cmeMemSecureDBReintegrate, cmeMemSecureDBProtect,
	cmeMemSecureDBUnprotect): Replaced calls to cmeProtectDBValue and
	cmeUnprotectDBValue with calls to cmeProtectDBSaltedValue and
	cmeUnprotectDBSaltedValue.  This adds salts to values before
	encryption within secure databases (i.e.  protected csv files).

	* crypto.c (cmeGetCipher): Fixed validation of encryption algorithm
	id.

	* crypto.c, crypto.h, function_tests.c (cmePBKDF): Renamed to
	cmePBKDF the key derivation function (was cmePKCS5v15).

	* crypto.c (cmePBKDF): Added and set as default PBKDF2 support.

	* sqlite/: updated the included sqlite version to v.3.7.11.

	* TEST/: updated test files and test DB (compatible with new PBKDF2
	method)

	* README (OLDPBKDF1): added information on configure parameter
	--enable-OLDPBKDF1, which enables old PBKDF1 to be used instead of
	PBKDF2 (which is now the default).

	* README (IV. Architecture and functionality): updated status of
	current PBKDF algorithm.

	* README (orgKEy): updated the default key for the TEST database.

	* INSTALL (orgKey): added the default credentials for the test
	database directly in this file.

2012-03-30 Omar A. Herrera Reyna <omar.herrera@kinakuta.com.mx>

	* crypto.c (cmeSeedPrng): Added some comments and a TODO, in
	relation to randomness sources for seeding the PRNG.

	* crypto.c (cmeCipherByteString): Made all references to the size of
	the byte salt, relative to constant evpSaltBufferSize.

	* common.h (cmeDefaultIDBytesLen): Added comment on the use of this
	constant.

	* common.h (cmeDefaultSecureDBSaltLen): Created a salt length
	constant specific for meta and data salts within secure databases
	(they were using cmeDefaultIDBytesLen, which is for a different
	purpose: define the lenght of random file names for secured files
	and databases).

	* filehandling.c (cmeRAWFileToSecureFile): Cleaned up some
	previously commented code.

	*db.c (cmeMemSecureDBProtect): Replaced calls to cmePrngGetBytes() and
	cmeBytesToHexstr() with a single call to cmeGetRndSaltAnySize();
	also used cmeDefaultSecureDBSaltLen instead of cmeDefaultIDBytesLen.

2012-03-13 Omar A. Herrera Reyna <omar.herrera@kinakuta.com.mx>

	* engine_admin.c (cmeWebServiceCheckPermissions): fixed some
	comments.

	* webservice_interface.c (cmeWebServiceProcessRequest): solved
	FIXME, moved processing of cmeWebServiceProcessEngineResource after
	authentication and authorization, validating engineCommands resource
	class.

	* webservice_interface.c (cmeWebServiceProcessEngineResource):
	deleted redundant authorization checks.

	* common.h (cmeWSMsgEngineOptions) fixed definition.

	* db.c (cmeMemSecureDBReintegrate) deleted unused variable written2.

	* README (engineCommands,setEnginePower) documented new
	functionality to enable or disable a running engine

2012-03-07 Omar A. Herrera Reyna <omar.herrera@kinakuta.com.mx>

	* db.c (cmeProtectDBSaltedValue,cmeProtectDBValue): replaced
	cmeCipherByteString + cmeStrToB64 with the already existent wrapper
	function cmeProtectByteString; simplify and improve clarity.

	* db.c (cmeMemSecureDBProtect): replaced cmeCipherByteString +
	cmeStrToB64 with the already existent wrapper function
	cmeProtectDBValue; simplify and improve clarity.

	* db.c (cmeMemSecureDBReintegrate): replaced cmeB64ToStr +
	cmeCipherByteString with the already existent wrapper function
	cmeUnprotectDBValue; simplify and improve clarity.

	* db.c (cmeUnprotectDBSaltedValue,cmeUnprotectDBValue): replaced
	cmeB64ToStr + cmeCipherByteString with the already existent wrapper
	function cmeUnprotectByteString; simplify and improve clarity.

	* db.c (cmeMemSecureDBProtect): added rndBytes to Free macro, for
	consistency.

	* db.h (cmeProtectDBValue,cmeUnprotectDBValue): solved TODO,
	replaced cmeCipherByteString + B64 conversion function with wrapper
	function; simplify and improve clarity.

	* crypto.h: fixed/modified some comments.

	* crypto.c (cmeProtectByteString,cmeUnprotectByteString): fixed and
	standardized Free macros.  Solved TODO, replaced cmeCipherByteString
	with calls to cmeProtectByteString, cmeUnprotectByteString,
	cmeProtectDBValue and cmeUnprotectDBValue.

	* filehandling.c (cmeRAWFileToSecureFile); replaced
	cmeCipherByteString + cmeStrToB64 with the already existent wrapper
	function cmeProtectByteString; simplify and improve clarity.  Also
	added error logging.

	* function_tests.c (testCryptoSymmetric): added tests for
	cmeProtectByteString and cmeUnprotectByteString.

	* Makefile: removed file from distribution.

2012-03-01 Omar A. Herrera Reyna <omar.herrera@kinakuta.com.mx>

	* CaumeDSE: Tested the whole project against buffer overflows and
	underflows by linking the debug version with the duma library and
	gdb.  No problems were found.

        * README: cleaned up and fixed some typos.

	* webservice_interface.c (cmeWebServiceRequestCompleted): solved
	TODO; implemented file overwrite before delete for temporary files
	(e.g.  in secureTmp).

2012-02-28 Omar A. Herrera Reyna <omar.herrera@kinakuta.com.mx>

        * webservice_interface.c filehandling.c: cleaned up and fixed some
        comments/fprintfs.

	* webservice_interface.c (cmeRAWFileToSecureFile): added
	currentFilePartPath to cmeRAWFileToSecureFileFree for consistency

	* engine_admin.c (cmeWebServiceSetup): reordered MHD_start_daemon
	parameters for clarity.

2012-02-27 Omar A. Herrera Reyna <omar.herrera@kinakuta.com.mx>

        * filehandling.c: cleaned up and fixed some comments.

	* filehandling.c (cmeSecureFileToTmpRAWFile): deleted unused
	variable resultMemTable. Solved TODO; added orgResourceId and
	storageId checks and corresponding parameters.

	* filehandling.h (cmeSecureFileToTmpRAWFile cmeCSVFileToSecureDB):
	adjusted function call parameters.

	* webservice_interface.c (cmeWebServiceProcessContentClass):
	adjusted function call parameters for cmeSecureFileToTmpRAWFile.

	* db.c db.h engine_admin.c engine_interface.c filehandling.c
	webservice_interface.c function_test.c (cmeMemTable cmeSQLRows
	cmeCSVFileToSecureDB): replaced pErrmsg/errMsg parameter with local
	variable.  SQLite3 Error msg handling will be done only within
	cmeMemTable function.

2012-02-24 Omar A. Herrera Reyna <omar.herrera@kinakuta.com.mx>

	* perl_interpreter.c (cmePerlParserCmdLineInit,
	cmePerlParserInstruction): Disabled deallocation and reallocation
	procedure for Perl interpreter on each execution to fix problems
	with some Perl instances.

	* config.log: deleted from distribution.

	* configure.ac (GENERAL_CFLAGS RELEASE_CFLAGS DEBUG_CFLAGS): deleted
	manual optimization flags.  We'll go with the defaults (user can
	override them with configure script anyway).

	* configure.ac (echo): changed order of compiler paramters in
	configure result printout, to reflect actual order and added
	environment CFLAGS.

2012-02-23 Omar A. Herrera Reyna <omar.herrera@kinakuta.com.mx>

	* README: Reformatted some paragraphs, corrected some spelling
	errors and changed some wording.

	* engine_admin.c (cmeWebServiceSetup): removed
	MHD_USE_THREAD_PER_CONNECTION from HTTP configuration since we are
	using a single thread (i.e.  MHD_USE_SELECT_INTERNALLY, as in
	HTTPS).

	* common.h (cmeBypassTLSAuthenticationInHTTP): added define for
	bypassing TLS authentication when non TLS sessions (e.g. HTTP) are
	used. Value comes from BYPASS_TLS_IN_HTTP in config.h.

	* webservice_interface.c (cmeWebServiceProcessRequest): Now skips
	TLS authentication if no TLS session is available, and bypasses
	(i.e.  accepts) authentication if TLS authentication is required,
	session is no HTTP and cmeBypassTLSAuthenticationInHTTP is 1.

	* configure.ac (BYPASSTLSAUTHINHTTP BYPASS_TLS_IN_HTTP): included
	enable parameter to allow TLS authentication bypasses for non TLS
	sessions (e.g.  for HTTP session testing). 

	* config.h (BYPASS_TLS_IN_HTTP): define included by configure.ac

	* configure.ac (PERL): fixed perl check; autoreconf -i works again.

2012-02-22  Omar A. Herrera Reyna <omar.herrera@kinakuta.com.mx>

	* configure.ac (PATH_DATADIR): Added C preprocessor define for
	default data/system databases path, to be included in config.h.

	* common.h (cmeDefaultFilePath, cmeDefaultSecureTmpFilePath,
	cmeDefaultHTTPSKeyFile, cmeDefaultHTTPSCertFile,
	cmeDefaultCACertFile, cmeAdminDefaultStoragePath): Set defines
	relative to PATH_DATADIR from config.h, if available.

        * common.h (cmeEngineVersion): Set define = PACKAGE_VERSION
        from config.h, if available.

	* README: Reformatted some paragraphs and corrected some spelling
	errors

2012-02-21  Omar A. Herrera Reyna <omar.herrera@kinakuta.com.mx>

        * configure.ac: New file, Autoconf template.

	* Makefile.ac: New file, Automake template.

	* NEWS: New file, placeholder for news.

	* AUTHORS: New file, list of authors.

	* ChangeLog: New file, list of changes.

	* configure, compile, depcomp, missing, install-sh: New scripts from
	Autotools.

2012-02-16  Omar A. Herrera Reyna <omar.herrera@kinakuta.com.mx>

	* RELEASED first version 0.88.alpha

Copyright 2010 - 2012 Omar Alejandro Herrera Reyna
Copying and distribution of this file, with or without modification, are
permitted provided the copyright notice and this notice are preserved.
