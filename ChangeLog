2012-05-01 Omar A. Herrera Reyna <omar.herrera@kinakuta.com.mx>

	* filehandling.c (cmeFileOverwriteAndDelete): Changed error into
	warning (debug) when the filepointer is null.

	* filehandling.c (cmeFileOverwriteAndDelete): fixed error outputs. 
	Error logging should be done to stderr, not to stdout as debug
	output.	
	
	* engine_interface.c (cmeGetUnprotectDBRegister): replaced
	cmeUnprotectDBValue + manual salt skipping with
	cmeUnprotectDBSaltedValue function, which skips the salt already in a
	standardized way.

	* engine_interface.c (cmeGetUnprotectDBRegister,
	cmePutProtectDBRegister): Changed error output into warning (debug)
	when cmeUnprotectDBSaltedValue fails.

	* filehandling.c (cmeSecureFileToTmpRAWFile): fixed compiler warning
	when calling fwrite without storing result.

	* filehandling.c (cmeCSVFileToSecureDB): fixed compiler warning
	"'totalParts' may be used uninitialized in this function".

	* db.c (cmeMemSecureDBProtect): fixed warning "'cont2' may be used
	uninitialized in this function".

	* function_tests.c (testCryptoSymmetric): fixed compiler warning
	when calling fwrite without storing result.

	* webservice_interface.c (cmeWebServiceProcessEngineResource): fixed
	compiler warning "'tmpPowerStatus' may be used uninitialized in this
	function". This one might have actually caused some problems.

2012-04-23 Omar A. Herrera Reyna <omar.herrera@kinakuta.com.mx>

	* common.h (prngSeedBytes,evpSaltBufferSize,cmeDefaultValueSaltLen):
	Changed default settings to 16 bytes.

	* common.h (cmeDefaultHshAlg): Changed default hash algorithm to
	sha-512.

	* common.h (cmeCopyright,cmeWSHTMLPageStart): Created Copyright
	define and modified cmeWSHTMLPageStart notice to use it.

	* common.h (cmeDefaultPBKDFCount): Created default count for the key
	derivation function cmePBKDF.

	* common.h (cmeDefaultPBKDFVersion): Added default PBKDF version.

	* function_tests.c (testCSV): Changed attributesData to use
	cmeDefaultEncAlg instead of the fixed algortihm string
	"aes-128-cbc".

	* function_tests.c (testCryptoSymmetric): Changed fixed tests with
	"aes-256-cbc" to test the algorithm specified by cmeDefaultEncAlg.

	* webservice_interface.c (cmeWebServiceProcessDocumentResource):
	Changed attributesData to use cmeDefaultEncAlg instead of the fixed
	algortihm string "aes-128-cbc".

	* configure.ac (AC_INIT): Updated version to 0.89.alpha

	* configure.ac (OLDPBKDF1): Added --enable parameter to use old
	PBKDF v1 (PKCS5v.1.5) instead of PBKDF2 (PKCS5v2.0).  PBKDF2 is now
	the default.

	* main.c: changed Copyright notice to use cmeCopyright define.
 
	* main.c: Cleaned up some comments and added function to check that
	cmeDefaultEncAlg is a supported algorithm.

	* main.c: Added standard free macro.

	* db.c (cmeMemSecureDBReintegrate): fixed pointer to unallocated
	region in pointer packing loop.

	* db.c (cmeMemSecureDBReintegrate, cmeMemSecureDBProtect,
	cmeMemSecureDBUnprotect): Replaced calls to cmeProtectDBValue and
	cmeUnprotectDBValue with calls to cmeProtectDBSaltedValue and
	cmeUnprotectDBSaltedValue.  This adds salts to values before
	encryption within secure databases (i.e.  protected csv files).

	* crypto.c (cmeGetCipher): Fixed validation of encryption algorithm
	id.

	* crypto.c, crypto.h, function_tests.c (cmePBKDF): Renamed to
	cmePBKDF the key derivation function (was cmePKCS5v15).

	* crypto.c (cmePBKDF): Added and set as default PBKDF2 support.

	* sqlite/: updated the included sqlite version to v.3.7.11.

	* TEST/: updated test files and test DB (compatible with new PBKDF2
	method)

	* README (OLDPBKDF1): added information on configure parameter
	--enable-OLDPBKDF1, which enables old PBKDF1 to be used instead of
	PBKDF2 (which is now the default).

	* README (IV. Architecture and functionality): updated status of
	current PBKDF algorithm.

	* README (orgKEy): updated the default key for the TEST database.

	* INSTALL (orgKey): added the default credentials for the test
	database directly in this file.

2012-03-30 Omar A. Herrera Reyna <omar.herrera@kinakuta.com.mx>

	* crypto.c (cmeSeedPrng): Added some comments and a TODO, in
	relation to randomness sources for seeding the PRNG.

	* crypto.c (cmeCipherByteString): Made all references to the size of
	the byte salt, relative to constant evpSaltBufferSize.

	* common.h (cmeDefaultIDBytesLen): Added comment on the use of this
	constant.

	* common.h (cmeDefaultSecureDBSaltLen): Created a salt length
	constant specific for meta and data salts within secure databases
	(they were using cmeDefaultIDBytesLen, which is for a different
	purpose: define the lenght of random file names for secured files
	and databases).

	* filehandling.c (cmeRAWFileToSecureFile): Cleaned up some
	previously commented code.

	*db.c (cmeMemSecureDBProtect): Replaced calls to cmePrngGetBytes() and
	cmeBytesToHexstr() with a single call to cmeGetRndSaltAnySize();
	also used cmeDefaultSecureDBSaltLen instead of cmeDefaultIDBytesLen.

2012-03-13 Omar A. Herrera Reyna <omar.herrera@kinakuta.com.mx>

	* engine_admin.c (cmeWebServiceCheckPermissions): fixed some
	comments.

	* webservice_interface.c (cmeWebServiceProcessRequest): solved
	FIXME, moved processing of cmeWebServiceProcessEngineResource after
	authentication and authorization, validating engineCommands resource
	class.

	* webservice_interface.c (cmeWebServiceProcessEngineResource):
	deleted redundant authorization checks.

	* common.h (cmeWSMsgEngineOptions) fixed definition.

	* db.c (cmeMemSecureDBReintegrate) deleted unused variable written2.

	* README (engineCommands,setEnginePower) documented new
	functionality to enable or disable a running engine

2012-03-07 Omar A. Herrera Reyna <omar.herrera@kinakuta.com.mx>

	* db.c (cmeProtectDBSaltedValue,cmeProtectDBValue): replaced
	cmeCipherByteString + cmeStrToB64 with the already existent wrapper
	function cmeProtectByteString; simplify and improve clarity.

	* db.c (cmeMemSecureDBProtect): replaced cmeCipherByteString +
	cmeStrToB64 with the already existent wrapper function
	cmeProtectDBValue; simplify and improve clarity.

	* db.c (cmeMemSecureDBReintegrate): replaced cmeB64ToStr +
	cmeCipherByteString with the already existent wrapper function
	cmeUnprotectDBValue; simplify and improve clarity.

	* db.c (cmeUnprotectDBSaltedValue,cmeUnprotectDBValue): replaced
	cmeB64ToStr + cmeCipherByteString with the already existent wrapper
	function cmeUnprotectByteString; simplify and improve clarity.

	* db.c (cmeMemSecureDBProtect): added rndBytes to Free macro, for
	consistency.

	* db.h (cmeProtectDBValue,cmeUnprotectDBValue): solved TODO,
	replaced cmeCipherByteString + B64 conversion function with wrapper
	function; simplify and improve clarity.

	* crypto.h: fixed/modified some comments.

	* crypto.c (cmeProtectByteString,cmeUnprotectByteString): fixed and
	standardized Free macros.  Solved TODO, replaced cmeCipherByteString
	with calls to cmeProtectByteString, cmeUnprotectByteString,
	cmeProtectDBValue and cmeUnprotectDBValue.

	* filehandling.c (cmeRAWFileToSecureFile); replaced
	cmeCipherByteString + cmeStrToB64 with the already existent wrapper
	function cmeProtectByteString; simplify and improve clarity.  Also
	added error logging.

	* function_tests.c (testCryptoSymmetric): added tests for
	cmeProtectByteString and cmeUnprotectByteString.

	* Makefile: removed file from distribution.

2012-03-01 Omar A. Herrera Reyna <omar.herrera@kinakuta.com.mx>

	* CaumeDSE: Tested the whole project against buffer overflows and
	underflows by linking the debug version with the duma library and
	gdb.  No problems were found.

        * README: cleaned up and fixed some typos.

	* webservice_interface.c (cmeWebServiceRequestCompleted): solved
	TODO; implemented file overwrite before delete for temporary files
	(e.g.  in secureTmp).

2012-02-28 Omar A. Herrera Reyna <omar.herrera@kinakuta.com.mx>

        * webservice_interface.c filehandling.c: cleaned up and fixed some
        comments/fprintfs.

	* webservice_interface.c (cmeRAWFileToSecureFile): added
	currentFilePartPath to cmeRAWFileToSecureFileFree for consistency

	* engine_admin.c (cmeWebServiceSetup): reordered MHD_start_daemon
	parameters for clarity.

2012-02-27 Omar A. Herrera Reyna <omar.herrera@kinakuta.com.mx>

        * filehandling.c: cleaned up and fixed some comments.

	* filehandling.c (cmeSecureFileToTmpRAWFile): deleted unused
	variable resultMemTable. Solved TODO; added orgResourceId and
	storageId checks and corresponding parameters.

	* filehandling.h (cmeSecureFileToTmpRAWFile cmeCSVFileToSecureDB):
	adjusted function call parameters.

	* webservice_interface.c (cmeWebServiceProcessContentClass):
	adjusted function call parameters for cmeSecureFileToTmpRAWFile.

	* db.c db.h engine_admin.c engine_interface.c filehandling.c
	webservice_interface.c function_test.c (cmeMemTable cmeSQLRows
	cmeCSVFileToSecureDB): replaced pErrmsg/errMsg parameter with local
	variable.  SQLite3 Error msg handling will be done only within
	cmeMemTable function.

2012-02-24 Omar A. Herrera Reyna <omar.herrera@kinakuta.com.mx>

	* perl_interpreter.c (cmePerlParserCmdLineInit,
	cmePerlParserInstruction): Disabled deallocation and reallocation
	procedure for Perl interpreter on each execution to fix problems
	with some Perl instances.

	* config.log: deleted from distribution.

	* configure.ac (GENERAL_CFLAGS RELEASE_CFLAGS DEBUG_CFLAGS): deleted
	manual optimization flags.  We'll go with the defaults (user can
	override them with configure script anyway).

	* configure.ac (echo): changed order of compiler paramters in
	configure result printout, to reflect actual order and added
	environment CFLAGS.

2012-02-23 Omar A. Herrera Reyna <omar.herrera@kinakuta.com.mx>

	* README: Reformatted some paragraphs, corrected some spelling
	errors and changed some wording.

	* engine_admin.c (cmeWebServiceSetup): removed
	MHD_USE_THREAD_PER_CONNECTION from HTTP configuration since we are
	using a single thread (i.e.  MHD_USE_SELECT_INTERNALLY, as in
	HTTPS).

	* common.h (cmeBypassTLSAuthenticationInHTTP): added define for
	bypassing TLS authentication when non TLS sessions (e.g. HTTP) are
	used. Value comes from BYPASS_TLS_IN_HTTP in config.h.

	* webservice_interface.c (cmeWebServiceProcessRequest): Now skips
	TLS authentication if no TLS session is available, and bypasses
	(i.e.  accepts) authentication if TLS authentication is required,
	session is no HTTP and cmeBypassTLSAuthenticationInHTTP is 1.

	* configure.ac (BYPASSTLSAUTHINHTTP BYPASS_TLS_IN_HTTP): included
	enable parameter to allow TLS authentication bypasses for non TLS
	sessions (e.g.  for HTTP session testing). 

	* config.h (BYPASS_TLS_IN_HTTP): define included by configure.ac

	* configure.ac (PERL): fixed perl check; autoreconf -i works again.

2012-02-22  Omar A. Herrera Reyna <omar.herrera@kinakuta.com.mx>

	* configure.ac (PATH_DATADIR): Added C preprocessor define for
	default data/system databases path, to be included in config.h.

	* common.h (cmeDefaultFilePath, cmeDefaultSecureTmpFilePath,
	cmeDefaultHTTPSKeyFile, cmeDefaultHTTPSCertFile,
	cmeDefaultCACertFile, cmeAdminDefaultStoragePath): Set defines
	relative to PATH_DATADIR from config.h, if available.

        * common.h (cmeEngineVersion): Set define = PACKAGE_VERSION
        from config.h, if available.

	* README: Reformatted some paragraphs and corrected some spelling
	errors

2012-02-21  Omar A. Herrera Reyna <omar.herrera@kinakuta.com.mx>

        * configure.ac: New file, Autoconf template.

	* Makefile.ac: New file, Automake template.

	* NEWS: New file, placeholder for news.

	* AUTHORS: New file, list of authors.

	* ChangeLog: New file, list of changes.

	* configure, compile, depcomp, missing, install-sh: New scripts from
	Autotools.

2012-02-16  Omar A. Herrera Reyna <omar.herrera@kinakuta.com.mx>

	* RELEASED first version 0.88.alpha

Copyright 2010 - 2012 Omar Alejandro Herrera Reyna
Copying and distribution of this file, with or without modification, are
permitted provided the copyright notice and this notice are preserved.
