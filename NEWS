2012-06-20 0.90.alpha

	* Implemented Fast PBKDF2 (just 1 iteration with the provided salt)
	when the key provided is an hexadecimal representation of a binary
	key with length >= key length of the default cipher algorithm.  We
	assume the key was generated randomly.  In this case, there is no
	need for key expansion since we are just doing a permutation within
	the key space.  Also, EngineAdmin's random key now has a length that
	is = to the default cipher when created with a new internal
	database, so that this perfomance improvement can be used.  Note
	that the included example database maintains a shorter key (128 bits
	= 16 bytes) while the default algorithm (AES-256-CBC) uses a longer
	key (256 bits = 32 bytes); Therefore PBKDF2 will run with all the
	default iterations when EngineAdmin is used with the default
	database (i.e.  it will still run very slow).

	* fixes and code clean up

2012-06-18 0.90.alpha

	* Implemented resource handling for individual columns in documents
	of type file.csv, via the contentColumn resource (see README for
	details).  You can now append new columns or create csv documents
	with their first column(POST), read individual columns (GET), delete
	individual columns or the whole document if there are no other
	columns (DELETE) and confirm that individual columns exist (HEAD).

	* With column and row resources we now provide a basic NoSQL
	approach to hanling data tables (file.csv documents) easily.

	* Implemented several controls for row and column handling. In
	particular SQL injection controls.

	* fixes and code clean up

2012-05-22 0.90.alpha

	* Implemented resource handling for individual rows in documents of
	type file.csv, via the contentRow resource (see README for details). 
	You can now append new rows (POST), read individual rows (GET),
	delete individual rows (DELETE), confirm that individual rows exist
	(HEAD) or update some column values of a specific row (PUT).

	* Some fixes and code clean up

2012-05-08 0.90.alpha

	* Implemented HMAC for MACs using a key derived from PBKDF (v2 is
	the default with 2000 rounds and sha256) and the same salt that is
	being used for encrypting/decrypting files or register elements.

	* Implemented Encrypt-Then-MAC on all registers in secure internal
	databases (with verification before decrypting).

	* Implemented Encrypt-Then-MAC for protected databases (e.g.
	imported CSV files) and for RAW files; it is applied to the whole
	binary file. MAC is also verified before decrypting the file.

	* Some bug fixes.
	
	* Updated version to 0.90.alpha